from __future__ import annotations

import random
from typing import Protocol

from ..dynamic.generator import Episode, Node
from .models import Option, OptionResolution


class EpisodeGenerator(Protocol):
    def generate(self, rng: random.Random) -> Episode: ...


class OptionProvider(Protocol):
    def options(self, node: Node, rng: random.Random, mc_trials: int) -> list[Option]: ...
    def resolve(self, node: Node, chosen: Option, rng: random.Random) -> OptionResolution: ...


class Presenter(Protocol):
    def start_session(self, total_hands: int) -> None: ...
    def start_hand(self, hand_index: int, total_hands: int) -> None: ...
    def show_node(self, node: Node, options: list[str]) -> None: ...
    def prompt_choice(self, n: int) -> int: ...
    def step_feedback(self, node: Node, chosen: Option, best: Option) -> None: ...
    def summary(self, records: list[dict]) -> None: ...
